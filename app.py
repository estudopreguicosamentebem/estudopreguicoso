import streamlit as st
from g4f.client import Client
import time

def formatar_prompt(assuntos):
    """Gera o prompt estruturado para a API."""
    return f"""
    Crie um resumo detalhado em portugu√™s com base nestes t√≥picos:
    {assuntos}

    Requisitos:
    - Estruture de forma detalhada e abrangente
    - Use linguagem simples mas formal
    - Seja claro e objetivo
    - Inclua exemplos pr√°ticos quando relevante
    - Mantenha a coer√™ncia entre os t√≥picos
    - Utilize formata√ß√£o Markdown para organiza√ß√£o
    - Limite de 1500 palavras

    Estruture da seguinte forma:
    # T√≠tulo Principal
    ## Subt√≥picos quando necess√°rio
    - Pontos chave
    - Explica√ß√µes concisas
    - Dados relevantes
    """

def gerar_resumo(prompt):
    """Envia a solicita√ß√£o para a API e retorna a resposta."""
    client = Client()
    try:
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt}],
            web_search=True,
            timeout=30
        )
        return response.choices[0].message.content
    except Exception as e:
        st.error(f"Erro ao conectar com a API: {e}")
        return None

def main():
    st.set_page_config(page_title="Estudo Pregui√ßoso", page_icon="üìù")
    
    st.title("üìù Estudo Pregui√ßoso")
    st.markdown("---")
    
    with st.expander("‚ÑπÔ∏è Como usar"):
        st.write("""
        1. Digite os t√≥picos que deseja resumir (separados por v√≠rgula ou ponto e v√≠rgula)
        2. Clique no bot√£o 'Gerar Resumo'
        3. Aguarde o processamento
        4. Visualize o resultado
        """)
    
    assuntos = st.text_area(
        "Digite os t√≥picos que deseja resumir:",
        placeholder="Ex: Intelig√™ncia Artificial, Machine Learning, Deep Learning"
    )
    
    if st.button("Gerar Resumo", type="primary"):
        if not assuntos.strip():
            st.warning("Por favor, insira pelo menos um t√≥pico para gerar o resumo.")
            return
        
        with st.spinner("‚è≥ Processando sua solicita√ß√£o..."):
            inicio = time.time()
            
            prompt = formatar_prompt(assuntos)
            resumo = gerar_resumo(prompt)
            
            if resumo:
                st.success("Resumo gerado com sucesso!")
                st.markdown("---")
                st.subheader("Resultado")
                st.markdown(resumo)
                
                st.markdown("---")
                st.write(f"‚è±Ô∏è Tempo total: {time.time() - inicio:.2f} segundos")
            else:
                st.error("N√£o foi poss√≠vel gerar o resumo.")

if __name__ == "__main__":
    main()
